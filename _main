#!/usr/bin/env bash

function run() {
  local query=$1
  domain_name=$(echo "$query" | sed -e 's|^[^/]*//||' -e 's|/.*$||' -e 's|.*@||' -e 's|www.||')

  local user_comment=${2:-''}

  [ -z "$domain_name" ] && echo 'Please provide a domain name.' && return

  _whowas_ensure_git
  git add -A && git commit -m"Adds existing content prior to the update."

  local status='UNKNOWN'
  local notes=()

  local tld=$(_whowas_extract_tld $domain_name)

  [ -z "$tld" ] && potato_run_task host $domain_name && return

  local hostfile=${tld}-HOST
  [ ! -e $hostfile ] && potato_run_task host $tld
  local host=$(cat $hostfile)

  [ -z "$host" ] && echo '[ERROR] could not find the whois server for '$tld && exit 1

  # Sanity check
  if [ -z "$tld" ]; then
    echo "[ERROR] un-intended whois lookup? (for $domain_name)"
    exit
  fi

  local cmd_whois="whois -h $host $domain_name"
  local txt=$($cmd_whois | tee $domain_name)

  # Print whois information for the user
  echo "$txt"

  notes+=( "whois performed and tld detected as '$tld'" )

  if [ ! -z "$(echo $txt | grep 'No whois server is known')" ]; then
    status="UNKNOWN"
    notes+=( "[WARNING] No whois server is known for '$tld'." )
  else
    case $tld in
      "info"|"org")
        [ ! -z "$(echo $txt | grep 'NOT FOUND')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "com"|"net")
        [ ! -z "$(echo $txt | grep -i 'no match for')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "co")
        [ ! -z "$(echo $txt | grep 'No Data Found')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "tech")
        [ ! -z "$(echo $txt | grep 'DOMAIN NOT FOUND')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      ir|is)
        [ ! -z "$(echo $txt | grep -i 'no entries found')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "it")
        [ ! -z "$(echo $txt | grep 'AVAILABLE')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "au")
        [ ! -z "$(echo $txt | grep 'NOT FOUND')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      *)
        # from .fast tld
        [ ! -z "$(echo $txt | grep -i 'This domain name has not been registered.')" ] && status="AVAILABLE"
        [ ! -z "$(echo $txt | grep -i 'NOT FOUND')" ] && status="AVAILABLE"
        [ ! -z "$(echo $txt | grep -i 'No match for domain')" ] && status="AVAILABLE"
        [ ! -z "$(echo $txt | grep -i 'No Data Found')" ] && status="AVAILABLE"

        [ ! -z "$(echo $txt | grep -i 'Creation Date')" ] && status="TAKEN"

        [ ! -z "$(echo $txt | grep -i 'The registration of this domain is restricted')" ] && status="RESTRICTED"

        # from .fun tld
        [ ! -z "$(echo $txt | grep -i 'not available for registration')" ] && status="TAKEN"
        [ ! -z "$(echo $txt | grep -i 'has been reserved')" ] && status="RESERVED"

        notes+=( "detected STATUS might not be correct." )
        ;;
    esac
    # Handling exceptions
    [ ! -z "$(echo $txt | grep 'This premium domain')" ] && status="PREMIUM"
    [ ! -z "$(echo $txt | grep 'This platinum domain is available')" ] && status="PREMIUM"

    # final try if there is no status detected so far.
    if [ "$status" = "UNKNOWN" ]; then
      if [ ! -z "$(echo $txt | grep -i 'domain:\s*'${tld})" ]; then
        # private TLDs owned by one organisation. e.g. .OFFICE by Microsoft
        status="PRIVATE"
      elif [ ! -z "$(echo $txt | grep -i 'this name is reserved')" ]; then
        # Reserved domain name example from .cleaning tld
        status="RESERVED"
      elif [ ! -z "$(echo $txt | grep -i 'Reserved Domain Name')" ]; then
        # Reserved domain name example from .review tld
        status="RESERVED"
      elif [ ! -z "$(echo $txt | grep -i 'is available for registration')" ]; then
        # Domain {{domain}} is available for registration
        # from .photo tld
        status="AVAILABLE"
      fi
    fi
  fi

  local git_commit_message=()
  git_commit_message+=( "Whois lookup for '$query' ($cmd_whois)." )
  if [ ! -z "$status" ]; then
    git_commit_message+=( " Detected as '$status'." )
  fi
  if [ ! -z "$user_comment" ]; then
    git_commit_message+=( " Commented as '$user_comment'." )
    notes+=( " Users comment: '$user_comment'." )
  fi

  echo $status > $domain_name-STATUS
  echo $(date +%F) "${notes[@]}" >> $domain_name-NOTES
  local commit_message="${git_commit_message[@]}"
  git add -A && git commit -m "${commit_message}"

  echo ''
  echo '## Query for '$query
  echo '$ '$cmd_whois
  echo ''
  test "$status" && echo '; Detected as '$status
  test "$user_comment" && echo '; Commented as '$user_comment
  echo ''

  case $status in
    AVAILABLE) ;; *)
      echo '; Important dates:'
      echo "$txt" | grep -i 'Updated\|Creat\|Expir'
    ;;
  esac

}
