#!/usr/bin/env bash

function run() {
  local domain_name=$(potato_get_arg 1)
  local user_comment=$(potato_get_arg 2)

  _whowas_ensure_git
  git add -A && git commit -m"Adds existing content prior to the update."

  local status='UNKNOWN'
  local notes=()

  local tld=$(_whowas_extract_tld $domain_name)

  # Sanity check
  if [ -z "$tld" ]; then
    echo "[ERROR] un-intended whois lookup? (for $domain_name)"
    exit
  fi

  local txt=$(whois $domain_name | tee $(_whowas_git_dir)/$domain_name)

  # Print whois information for the user
  echo "$txt"

  notes+=( "whois performed and tld detected as '$tld'" )

  if [ ! -z "$(echo $txt | grep 'No whois server is known')" ]; then
    status="UNKNOWN"
    notes+=( "[WARNING] No whois server is known for '$tld'." )
  else
    case $tld in
      "info"|"org")
        [ ! -z "$(echo $txt | grep 'NOT FOUND')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "com"|"net")
        [ ! -z "$(echo $txt | grep 'No match for domain')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "co")
        [ ! -z "$(echo $txt | grep 'No Data Found')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "tech")
        [ ! -z "$(echo $txt | grep 'DOMAIN NOT FOUND')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "ir")
        [ ! -z "$(echo $txt | grep 'no entries found')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      "it")
        [ ! -z "$(echo $txt | grep 'AVAILABLE')" ] && status="AVAILABLE" || status="TAKEN"
        ;;
      *)
        # from .fast ltd
        [ ! -z "$(echo $txt | grep -i 'This domain name has not been registered.')" ] && status="AVAILABLE"
        [ ! -z "$(echo $txt | grep -i 'NOT FOUND')" ] && status="AVAILABLE"
        [ ! -z "$(echo $txt | grep -i 'No match for domain')" ] && status="AVAILABLE"
        [ ! -z "$(echo $txt | grep -i 'No Data Found')" ] && status="AVAILABLE"

        [ ! -z "$(echo $txt | grep -i 'Creation Date')" ] && status="TAKEN"

        [ ! -z "$(echo $txt | grep -i 'The registration of this domain is restricted')" ] && status="RESTRICTED"

        notes+=( "detected STATUS might not be correct." )
        ;;
    esac
    # Handling exceptions
    [ ! -z "$(echo $txt | grep 'This premium domain')" ] && status="PREMIUM"
    [ ! -z "$(echo $txt | grep 'This platinum domain is available')" ] && status="PREMIUM"

  fi

  local git_commit_message=()
  git_commit_message+=( "Adds '$domain_name' whois info." )
  if [ ! -z "$status" ]; then
    git_commit_message+=( " Detected as '$status'." )
  fi
  if [ ! -z "$user_comment" ]; then
    notes+=( " Users comment: '$user_comment'." )
  fi


  echo $status > $domain_name-STATUS
  echo $(date +%F) "${notes[@]}" >> $domain_name-NOTES
  local commit_message="${git_commit_message[@]}"
  git add -A && git commit -m "${commit_message}"

  printf "Recorded '%s' for domain '%s'\n" $status $domain_name

  case $status in
    "TAKEN")
      echo "Related dates:"
      echo "$txt" | grep -i 'date'
    ;;
  esac

}
